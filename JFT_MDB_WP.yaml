
Description:  JFT EC2 MariaDB Template. Requires JFT VPC V2 Template to run
  Requires AmazonCloudWatch-linux in SSM for agent config
  Requires SSM Parameters (as below)
  /JFT/DefaultInstance - used for instance size
  /JFT/Wordpress/DBName - DB Created
  /JFT/Wordpress/DBUser - User given root permissions
  /JFT/Wordpress/DBPassword - password for that user
  /JFT/Wordpress/DBRootPassword - DB Root Password
Parameters:
  LatestAmiId:
    Description: AMI for Instance (default is latest AmaLinux2)
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: "Name of an existing SSH Keypair to access the instance"
    Default: JFT
  SSMKey:
    Description: Name of parameter store which contains the json configuration of CWAgent.
    Type : String
    Default: AmazonCloudWatch-linux
Resources:
  InstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
  InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref InstanceRole
  EC2Instance:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    Properties:
      KeyName: !Ref KeyName
      InstanceType: "{{resolve:ssm:/JFT/DefaultInstance:1}}"
      ImageId: !Ref LatestAmiId
      IamInstanceProfile: !Ref InstanceProfile
      SubnetId: !ImportValue jft-vpc1-subnet-weba
      SecurityGroupIds: 
        - !ImportValue jft-vpc1-default-instance-sg
      Tags:
        - Key: Name
          Value: JFT-MariaDB-Wordpress
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          # Assigning database credentials
          DBRootPassword=$(aws ssm get-parameters --region us-east-1 --names /JFT/Wordpress/DBRootPassword --with-decryption --query Parameters[0].Value)
          DBRootPassword=`echo $DBRootPassword | sed -e 's/^"//' -e 's/"$//'`
          DBPassword=$(aws ssm get-parameters --region us-east-1 --names /JFT/Wordpress/DBPassword --with-decryption --query Parameters[0].Value)
          DBPassword=`echo $DBPassword | sed -e 's/^"//' -e 's/"$//'`
          DBUser=$(aws ssm get-parameters --region us-east-1 --names /JFT/Wordpress/DBUser --query Parameters[0].Value)
          DBUser=`echo $DBUser | sed -e 's/^"//' -e 's/"$//'`
          DBName=$(aws ssm get-parameters --region us-east-1 --names /JFT/Wordpress/DBName --query Parameters[0].Value)
          DBName=`echo $DBName | sed -e 's/^"//' -e 's/"$//'`

          # Installing MariaDB
          yum -y install mariadb-server wget 
          systemctl enable mariadb
          systemctl start mariadb
          
          # Updating system
          yum -y update
          
          # Installing cloudwatch agent
          rpm -Uvh https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
          
          mkdir -p /usr/share/collectd/
          touch /usr/share/collectd/types.db
          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c ssm:${SSMKey} -s

          # Assigning database credentials
          echo "CREATE DATABASE $DBName;" >> /tmp/db.setup
          echo "CREATE USER '$DBUser' IDENTIFIED BY '$DBPassword';" >> /tmp/db.setup
          echo "GRANT ALL PRIVILEGES ON *.* TO '$DBUser'@'%';" >> /tmp/db.setup
          echo "FLUSH PRIVILEGES;" >> /tmp/db.setup
          mysqladmin -u root password "$DBRootPassword"
          mysql -u root --password="$DBRootPassword" < /tmp/db.setup
          rm /tmp/db.setup


          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource EC2Instance --region ${AWS::Region}
Outputs:
  dbhost:
    Description: "MariaDBHost"
    Value: !GetAtt EC2Instance.PrivateIp
    Export:
      Name: jft-mariadb-ip
